# a) with n = 50 and a known sigma, we may use a z-test
# b)
# H0: mu < 26
# Ha: mu >= 26, one-sided
# c)
# test statistic
z = (xbar - mu0) / (sigma / sqrt(n))
# 0.0764
# rejection region: z >= zalpha
z.alpha=qnorm(1 - alpha)
z.alpha
pval = pnorm(-abs(z))
pval
dat=c(6807.99, 7637.06, 6663.28, 6165.03, 6991.41, 6992.23,
6981.46, 7569.75, 7437.88, 6872.39, 7663.18, 6032.28,
6906.04, 6617.17, 6984.12, 7093.71, 7659.50, 7378.61,
7295.54, 6702.76, 7440.17, 8053.26, 8284.75, 7347.95,
7422.69, 7886.87, 6316.67, 7713.65, 7503.33, 7674.99)  #sample
xbar=mean(dat) #sample mean
s=sd(dat) #sample standard deviation
n=length(dat) #sample size
alpha=1-0.95 #confidence level is 95%=0.95
tt=qt(alpha/2,n-1,lower.tail=FALSE) # find  0.975 quantile of the t_n-1 distribution (t_0.025,n-1)
#OR z=qt(1-alpha/2,n-1)
Lbound=xbar-tt*s/sqrt(n)#low bound of the CI
Ubound=xbar+tt*s/sqrt(n)#Upper bound of the CI
CI=c(Lbound, Ubound)
CI
tt1=qt(alpha,n-1,lower.tail=FALSE)
LCB=c(xbar-tt1*s/sqrt(n))#lower confidence bound of mu (one-sided)
UCB=c(-Inf, xbar+tt1*s/sqrt(n))#Upper confidence bound of mu (one-sided)
LCB
UCB
n = 22
xbar = 5.77
s = 1.572
alpha = 1 - 0.98
t=qt(1-alpha/2,n-1)
t
# c)
Lbound=xbar-t*s/sqrt(n)#low bound of the CI
Ubound=xbar+t*s/sqrt(n)#Upper bound of the CI
CI=c(Lbound, Ubound)
CI
tt1=qt(alpha,n-1,lower.tail=FALSE)
LCB=c(xbar-tt1*s/sqrt(n), Inf)#lower confidence bound of mu (one-sided)
LCB
LCB=c(xbar-tt1*s/sqrt(n))#lower confidence bound of mu (one-sided)
LCB
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
find.package('rmarkdown')
install.packages('knitr', dependencies = TRUE)
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(dplyr)
install.packages('dplyr', dependencies = TRUE)
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
setRepositories()
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
install.packages('plyr', dependencies = TRUE)
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(ggplot2)
install.packages('ggplot2', dependencies = TRUE)
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(ggplot2)
install.packages('ggplot2', dependencies = TRUE)
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(ggplot2)
library(plyr)
library(labeling)
install.packages("labeling")
install.packages("labeling")
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(ggplot2)
install.packages("ggplot2")
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(ggplot2)
library(labeling)
install.packages("labeling")
install.packages("labeling")
install.packages("tibble")
sessionInfo()
sessionInfo()
restart()
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(ggplot2)
install.packages('ggplot2', dep = TRUE)
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(ggplot2)
if(!require(ggplot2)) install.packages('dplyr',dependencies = TRUE)
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(ggplot2)
library(labeling)
install.packages("lazyeval")
install.packages("ggplot2")
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(ggplot2)
summary(cars)
plot(cars)
CollegeData = read.csv(file = "~/Downloads/College.csv", header = TRUE, sep = ",")
CollegeData = CollegeData[,-1]
fix(CollegeData)
summary(CollegeData)
pairs(CollegeData)
[,1:10]
pairs(CollegeData)
pairs(CollegeData[,-1]) # references first 10 columns
pairs(CollegeData)      # references set
pairs(CollegeData[,-1]) # references first 10 columns
fix(CollegeData)
CollegeData = CollegeData[,-1]
fix(CollegeData)
pairs(CollegeData[,1:10]) # references first 10 columns
pairs(CollegeData)      # references set
UniName = CollegeData[,0]
UniName = CollegeData[,0]
UniName = CollegeData[,0]
UniName = CollegeData[,0]
OutState = CollegeData[,8]
plot(UniName, Outstate)
plot(UniName, Outstate, ...)
plot(CollegeData)
plot(Outstate)
plot(OutState)
plot(OutState, Private, p)
plot(OutState, CollegeData[,0]
plot(OutState, CollegeData[,0])
plot(UniName,OutState)
fix(CollegeData)
OutState
fix(CollegeData)
rownames(CollegeData) = CollegeData[,1]
fix(CollegeData)
CollegeData = read.csv(file = "~/Downloads/College.csv", header = TRUE, sep = ",")
fix(CollegeData)
rownames(CollegeData) = CollegeData[,1]
fix(CollegeData)
CollegeData = CollegeData[,-1]
fix(CollegeData)
college = read.csv(file = "~/Downloads/College.csv", header = TRUE, sep = ",")
fix(college)
rownames(college) = college[,1]
fix(college)
college = college[,-1]
fix(college)
summary(college)
fix(college)
Private = college[,0]
OutState = college[,8]
plot(UniName,OutState)
plot(Private,OutState)
pairs(college)        # references whole set
pairs(college[,1:10]) # references first 10 columns
Private = college[,0]
OutState = college[,8]
plot(Private,OutState)
plot()
plot(OutState)
fix(college)
plot(OutState, p)
plot(OutState, college[,0])
plot(OutState, college[,1])
fix(college)
plot(OutState, college[,2])
boxplot(OutState, college[,1])
boxplot(OutState, Private)
plot(Outstate, college[,1])
plot(OutState, college[,1])
boxplot(OutState, college[,1])
boxplot(OutState)
Elite = rep("No",nrow(college))
Elite[college$Top10perc>50]="Yes"
Elite=as.factor(Elite)
college=data.frame(college,Elite)
summary(Elite)
plot(OutState, Elite)
boxplot(OutState, Elite)
hist(Elite)
hist(OutState)
hist(OutState, Private)
par(mfrow=c(2,2))
hist(Private)
hist(OutState)
hist(Private)
fix(college)
hist(college[,3])
fix(college)
college[,13]
fix(college)
hist(phdCount)
phdCount = college[,13]
hist(phdCount)
fix(college)
appsCount = college[,2]
accpetCount = college[,3]
enrollCount = college[,4]
phdCount = college[,13]
hist(appsCount)
par(mfrow=c(1))
hist(OutState)
appsCount = college[,2]
accpetCount = college[,3]
enrollCount = college[,4]
phdCount = college[,13]
hist(appsCount)
par(mfrow=c(1,1))
hist(OutState)
appsCount = college[,2]
accpetCount = college[,3]
enrollCount = college[,4]
phdCount = college[,13]
hist(appsCount)
delete(accpetCount)
remove(accpetCount)
acceptCount = college[,3]
enrollCount = college[,4]
phdCount = college[,13]
par(mfrow=c(1,1))
hist(OutState)
hist(appsCount)
hist(acceptCount)
hist(appsCount, xlim = 1000)
hist(appsCount, xlim = 100)
hist(appsCount, xlim = "100")
hist(appsCount, xlim = range(1000))
hist(appsCount, xlim = range(10))
hist(appsCount, xlim = range(breaks))
hist(appsCount, xlim = range(5000))
hist(appsCount, xlim = range(20000))
hist(appsCount)
hist(appsCount, xlim = range(10000))
hist(appsCount, xlim = range(100000))
hist(appsCount, xlim = range(20000))
hist(appsCount, xlim = range(20000), ylim = 200)
hist(appsCount, xlim = range(20000), ylim = range(200))
hist(appsCount, ylim = range(200))
hist(appsCount
hist(acceptCount)
hist(appsCount)
hist(appsCount, xlim = range(20000))
hist(appsCount)
hist(acceptCount)
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(ggplot2)
summary(cars)
plot(cars)
library(MASS)
Boston
?Boston
summary()
summary(Boston)
head(Boston)
Boston
fix(Boston)
?Boston
head(Boston)
pairs(Boston[,1], Boston[,7])
pairs(Boston[,2], Boston[,7])
pairs(Boston[,2])
fix(Boston)
Boston[,0]
Boston[,0]
crime = Boston[,0]
crime
crime
crime = Boston[,1]
crime
fix(Boston)
pairs(crime, blackFolks)
pairs(crime, labels)
crime = Boston[,1]            # per capita crime rate by town
bigHouseZones = Boston[,2]    # proportion of residential land zoned for lots
# over 25,000 sq.ft
propIndus = Boston[,3]        # proportion of non-retail business acres per town
chas = Boston[,4]             # 1 if tract bounds Charles River, 0 o.w.
nox = Boston[,5]              # nitrogen oxides concentration(parts per 10 million)
rmsPerDwelling = Boston[,6]   # average number of rooms per dwelling
oldHomes = Boston[,7]         # proportion of owner-occupied units built pre-1940
distToWorkCenter = Boston[,8] # weighted mean of distance to 5 employment centers
radHighways = Boston[,9]      # index of accessibility to radial highways
tax = Boston[,10]             # full-value property-tax rate per \$10,000
pupilsPerTeacher = Boston[,11]# pupil-teacher ratio by town
blackFolks = Boston[,12]      # 1000(BF - 0.63) ^ 2
# where BF is the proportion of black folks by town
lstat = Boston[,13]           # lower status of the population (percent)
medv = Boston[,14]
pairs(crime, oldHomes)
pairs(crime, tax)
pairs(crime)
pairs(x=crime, y=oldHomes)
x = c(1,2,3,4,5)
y = c(1,2,3,4,9)
pairs(x, y)
pairs(Boston[-1,1:2])
par(mfrow=c(1,1))
pairs(Boston[-1,1:2])
par(mfrow=c(1,4))
par(mfrow=c(1))
par(mfrow=c(1,0))
par(mfrow=c(1,1))
pairs(Boston[-1])
pairs(Boston[,1,4])
pairs(Boston[,1:4])
pairs(Boston[,3:4])
pairs(crime+tax)
pairs(~crime+tax)
pairs(~crime+tax Main="crime vs tax")
pairs(~crime+tax, Main="crime vs tax")
pairs(~crime+tax, main="crime vs tax")
par(mfrow=c(1,1))
pairs(~crime+tax, main="crime vs tax")
boxplot(crime)
pairs(~crime+tax, main="crime vs tax")
pairs(~crime, main="crime vs tax")
pairs(~crime+radHighways, main="crime vs tax")
boxplot(OutState, college[,1])
pairs(college)        # references whole set
plot(OutState, college[,1])
plot(college$Private, college$Outstate)
plot(college$OutState, college$Elite)
plot(college$Outstate, college$Elite)
plot(college$Outstate, Elite)
plot(college$Outstate, college$Priavte)
plot(college$Private, college$Outstate)
plot(college$Elite, college$Outstate)
hist(OutState)
college = read.csv(file = "~/Downloads/College.csv", header = TRUE, sep = ",")
# b) print csv table
fix(college)
# remove uni names from list
rownames(college) = college[,1]
fix(college)
# isolate college names (sets as private)
college = college[,-1]
#let's look again
fix(college)
# c)
# i) use summary() to produce numerical summary of dataset
summary(college)
# ii) use pairs() to produce a scatterplot matrix
pairs(college)        # references whole set
pairs(college[,1:10]) # references first 10 columns
# iii) Use plot() to produce side-by-side boxplots
#      of OutState vs Private
plot(college$Private, college$Outstate)
# iv) Create qualitative variable Elite by binning Top10perc
Elite = rep("No",nrow(college))
Elite[college$Top10perc>50]="Yes"
Elite=as.factor(Elite)
college=data.frame(college,Elite)
# summary() to see how many elite universities there are
summary(Elite)
# plot() for side-by-side boxplots of OutState vs Elite
plot(college$Elite, college$Outstate)
#  v) Use hist() to produce some histograms
# assigning names to columns
appsCount = college[,2]
acceptCount = college[,3]
enrollCount = college[,4]
phdCount = college[,13]
# output format
par(mfrow=c(1,1))
# some histograms
hist(OutState)
hist(appsCount)
hist(college$Outstate)
hist(college$Apps)
hist(college$accept)
hist(college$acceptance)
hist(college$acceptance)
fix(college)
hist(college$Accept)
hist(college$Enroll)
hist(college$PhD)
pairs(college$crime)
pairs(Boston$crime+Boston$tax)
pairs(~Boston$crime+Boston$tax)
library(MASS)
Boston
?Boston
pairs(~Boston$crime+Boston$tax)
pairs(Boston$crime+Boston$tax)
pairs(~Boston$crime+Boston$tax)
pairs(~Boston$crime, Boston$tax)
pairs(~Boston$crime, ~Boston$tax)
plot(Boston$crim)
pairs(Boston$crim)
pairs(Boston$crim+Boston$tax)
pairs(~Boston$crim+Boston$tax)
pairs(~Boston$crim)
pairs(~Boston$crim+$tax)
pairs(~crim, tax)
pairs(~crim + tax)
pairs(~ crim + tax)
attach(Boston) # so we may access column names as variables
pairs(~ crim + tax)
boxplot(crim)
boxplot(chas)
?Boston
pairs(~ crim + tax + indus)
?Boston
pairs(~ crim + Elite + age)
pairs(~ crim + nox + age)
?Boston
pairs(~ ptratio, tax, lstat)
pairs(~ ptratio + tax + lstat)
?Boston
pairs(~ ptratio + tax + lstat)
?Boston
pairs(~ ptratio + tax + lstat)
attach(Boston) # so we may access column names as variables
library(MASS)
attach(Boston) # so we may access column names as variables
pairs(~ crim + nox + age)
pairs(~ ptratio + tax + lstat)
pairs(~ crim + nox + age)
?Boston
pairs( ~ black + crim)
pairs( ~ tax + crim)
pairs( ~ ptratio + crim)
pairs( ~ age + crim)
pairs( ~ nox + crim)
pairs( ~ mdv + crim)
pairs( ~ mdvl + crim)
?Boston
pairs( ~ medv + crim)
pairs( ~ chas + crim)
pairs( ~ rad + crim)
?Boston
pairs( ~ lstat + crim)
pairs( ~ lstat + crim)
?Boston
pairs( ~ black + crim)
pairs( ~ age + crim)
pairs( ~ zn + crim)
pairs( ~ indus + crim)
pairs( ~  chas+ crim)
pairs( ~ nox + crim)
pairs( ~ rm + crim)
pairs( ~ dis + crim)
pairs( ~ rad + crim)
pairs( ~ tax + crim)
pairs( ~ ptratio + crim)
pairs( ~ medv + crim)
?Boston
pairs( ~ ptratio + crim)
pairs( ~ tax + crim)
pairs( ~ dis + crim)
pairs( ~ nox + crim)
?Boston
fix(Boston)
plot(tax)
summary(tax)
summary(crime)
summary(crim)
summary(tax)
?Boston
summary(chas)
sum(chas)
summary(ptratio)
median(ptratio)
min(ptratio)
?Boston
min(medv)
which(min(medv))
rownames(min(medv))
subset(min(medv))
min(medv)
fix(Boston)
identify(min(medv))
college = read.csv(file = "College.csv", header = TRUE, sep = ",")
setwd("~/Documents/MATH448/hw1")
college = read.csv(file = "College.csv", header = TRUE, sep = ",")
sum(rm>7)
sum(rm > 7)
?Boston
library(MASS)
Boston
sum(rm > 7)
?Boston
sum(rm)
sum(chas)
attach(Boston) # so we may access column names as variables
sum(rm > 7)
sum(rm > 8)
?Boston
