plot(OutState, Elite)
boxplot(OutState, Elite)
hist(Elite)
hist(OutState)
hist(OutState, Private)
par(mfrow=c(2,2))
hist(Private)
hist(OutState)
hist(Private)
fix(college)
hist(college[,3])
fix(college)
college[,13]
fix(college)
hist(phdCount)
phdCount = college[,13]
hist(phdCount)
fix(college)
appsCount = college[,2]
accpetCount = college[,3]
enrollCount = college[,4]
phdCount = college[,13]
hist(appsCount)
par(mfrow=c(1))
hist(OutState)
appsCount = college[,2]
accpetCount = college[,3]
enrollCount = college[,4]
phdCount = college[,13]
hist(appsCount)
par(mfrow=c(1,1))
hist(OutState)
appsCount = college[,2]
accpetCount = college[,3]
enrollCount = college[,4]
phdCount = college[,13]
hist(appsCount)
delete(accpetCount)
remove(accpetCount)
acceptCount = college[,3]
enrollCount = college[,4]
phdCount = college[,13]
par(mfrow=c(1,1))
hist(OutState)
hist(appsCount)
hist(acceptCount)
hist(appsCount, xlim = 1000)
hist(appsCount, xlim = 100)
hist(appsCount, xlim = "100")
hist(appsCount, xlim = range(1000))
hist(appsCount, xlim = range(10))
hist(appsCount, xlim = range(breaks))
hist(appsCount, xlim = range(5000))
hist(appsCount, xlim = range(20000))
hist(appsCount)
hist(appsCount, xlim = range(10000))
hist(appsCount, xlim = range(100000))
hist(appsCount, xlim = range(20000))
hist(appsCount, xlim = range(20000), ylim = 200)
hist(appsCount, xlim = range(20000), ylim = range(200))
hist(appsCount, ylim = range(200))
hist(appsCount
hist(acceptCount)
hist(appsCount)
hist(appsCount, xlim = range(20000))
hist(appsCount)
hist(acceptCount)
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(ggplot2)
summary(cars)
plot(cars)
library(MASS)
Boston
?Boston
summary()
summary(Boston)
head(Boston)
Boston
fix(Boston)
?Boston
head(Boston)
pairs(Boston[,1], Boston[,7])
pairs(Boston[,2], Boston[,7])
pairs(Boston[,2])
fix(Boston)
Boston[,0]
Boston[,0]
crime = Boston[,0]
crime
crime
crime = Boston[,1]
crime
fix(Boston)
pairs(crime, blackFolks)
pairs(crime, labels)
crime = Boston[,1]            # per capita crime rate by town
bigHouseZones = Boston[,2]    # proportion of residential land zoned for lots
# over 25,000 sq.ft
propIndus = Boston[,3]        # proportion of non-retail business acres per town
chas = Boston[,4]             # 1 if tract bounds Charles River, 0 o.w.
nox = Boston[,5]              # nitrogen oxides concentration(parts per 10 million)
rmsPerDwelling = Boston[,6]   # average number of rooms per dwelling
oldHomes = Boston[,7]         # proportion of owner-occupied units built pre-1940
distToWorkCenter = Boston[,8] # weighted mean of distance to 5 employment centers
radHighways = Boston[,9]      # index of accessibility to radial highways
tax = Boston[,10]             # full-value property-tax rate per \$10,000
pupilsPerTeacher = Boston[,11]# pupil-teacher ratio by town
blackFolks = Boston[,12]      # 1000(BF - 0.63) ^ 2
# where BF is the proportion of black folks by town
lstat = Boston[,13]           # lower status of the population (percent)
medv = Boston[,14]
pairs(crime, oldHomes)
pairs(crime, tax)
pairs(crime)
pairs(x=crime, y=oldHomes)
x = c(1,2,3,4,5)
y = c(1,2,3,4,9)
pairs(x, y)
pairs(Boston[-1,1:2])
par(mfrow=c(1,1))
pairs(Boston[-1,1:2])
par(mfrow=c(1,4))
par(mfrow=c(1))
par(mfrow=c(1,0))
par(mfrow=c(1,1))
pairs(Boston[-1])
pairs(Boston[,1,4])
pairs(Boston[,1:4])
pairs(Boston[,3:4])
pairs(crime+tax)
pairs(~crime+tax)
pairs(~crime+tax Main="crime vs tax")
pairs(~crime+tax, Main="crime vs tax")
pairs(~crime+tax, main="crime vs tax")
par(mfrow=c(1,1))
pairs(~crime+tax, main="crime vs tax")
boxplot(crime)
pairs(~crime+tax, main="crime vs tax")
pairs(~crime, main="crime vs tax")
pairs(~crime+radHighways, main="crime vs tax")
boxplot(OutState, college[,1])
pairs(college)        # references whole set
plot(OutState, college[,1])
plot(college$Private, college$Outstate)
plot(college$OutState, college$Elite)
plot(college$Outstate, college$Elite)
plot(college$Outstate, Elite)
plot(college$Outstate, college$Priavte)
plot(college$Private, college$Outstate)
plot(college$Elite, college$Outstate)
hist(OutState)
college = read.csv(file = "~/Downloads/College.csv", header = TRUE, sep = ",")
# b) print csv table
fix(college)
# remove uni names from list
rownames(college) = college[,1]
fix(college)
# isolate college names (sets as private)
college = college[,-1]
#let's look again
fix(college)
# c)
# i) use summary() to produce numerical summary of dataset
summary(college)
# ii) use pairs() to produce a scatterplot matrix
pairs(college)        # references whole set
pairs(college[,1:10]) # references first 10 columns
# iii) Use plot() to produce side-by-side boxplots
#      of OutState vs Private
plot(college$Private, college$Outstate)
# iv) Create qualitative variable Elite by binning Top10perc
Elite = rep("No",nrow(college))
Elite[college$Top10perc>50]="Yes"
Elite=as.factor(Elite)
college=data.frame(college,Elite)
# summary() to see how many elite universities there are
summary(Elite)
# plot() for side-by-side boxplots of OutState vs Elite
plot(college$Elite, college$Outstate)
#  v) Use hist() to produce some histograms
# assigning names to columns
appsCount = college[,2]
acceptCount = college[,3]
enrollCount = college[,4]
phdCount = college[,13]
# output format
par(mfrow=c(1,1))
# some histograms
hist(OutState)
hist(appsCount)
hist(college$Outstate)
hist(college$Apps)
hist(college$accept)
hist(college$acceptance)
hist(college$acceptance)
fix(college)
hist(college$Accept)
hist(college$Enroll)
hist(college$PhD)
pairs(college$crime)
pairs(Boston$crime+Boston$tax)
pairs(~Boston$crime+Boston$tax)
library(MASS)
Boston
?Boston
pairs(~Boston$crime+Boston$tax)
pairs(Boston$crime+Boston$tax)
pairs(~Boston$crime+Boston$tax)
pairs(~Boston$crime, Boston$tax)
pairs(~Boston$crime, ~Boston$tax)
plot(Boston$crim)
pairs(Boston$crim)
pairs(Boston$crim+Boston$tax)
pairs(~Boston$crim+Boston$tax)
pairs(~Boston$crim)
pairs(~Boston$crim+$tax)
pairs(~crim, tax)
pairs(~crim + tax)
pairs(~ crim + tax)
attach(Boston) # so we may access column names as variables
pairs(~ crim + tax)
boxplot(crim)
boxplot(chas)
?Boston
pairs(~ crim + tax + indus)
?Boston
pairs(~ crim + Elite + age)
pairs(~ crim + nox + age)
?Boston
pairs(~ ptratio, tax, lstat)
pairs(~ ptratio + tax + lstat)
?Boston
pairs(~ ptratio + tax + lstat)
?Boston
pairs(~ ptratio + tax + lstat)
attach(Boston) # so we may access column names as variables
library(MASS)
attach(Boston) # so we may access column names as variables
pairs(~ crim + nox + age)
pairs(~ ptratio + tax + lstat)
pairs(~ crim + nox + age)
?Boston
pairs( ~ black + crim)
pairs( ~ tax + crim)
pairs( ~ ptratio + crim)
pairs( ~ age + crim)
pairs( ~ nox + crim)
pairs( ~ mdv + crim)
pairs( ~ mdvl + crim)
?Boston
pairs( ~ medv + crim)
pairs( ~ chas + crim)
pairs( ~ rad + crim)
?Boston
pairs( ~ lstat + crim)
pairs( ~ lstat + crim)
?Boston
pairs( ~ black + crim)
pairs( ~ age + crim)
pairs( ~ zn + crim)
pairs( ~ indus + crim)
pairs( ~  chas+ crim)
pairs( ~ nox + crim)
pairs( ~ rm + crim)
pairs( ~ dis + crim)
pairs( ~ rad + crim)
pairs( ~ tax + crim)
pairs( ~ ptratio + crim)
pairs( ~ medv + crim)
?Boston
pairs( ~ ptratio + crim)
pairs( ~ tax + crim)
pairs( ~ dis + crim)
pairs( ~ nox + crim)
?Boston
fix(Boston)
plot(tax)
summary(tax)
summary(crime)
summary(crim)
summary(tax)
?Boston
summary(chas)
sum(chas)
summary(ptratio)
median(ptratio)
min(ptratio)
?Boston
min(medv)
which(min(medv))
rownames(min(medv))
subset(min(medv))
min(medv)
fix(Boston)
identify(min(medv))
library(Boston)
library(MASS)
attach(Boston)
attributes(Boston)
attributes(Boston) - row.names
min(crim)
median(crim)
tail(crim)
head(crim)
str(Boston)
sort(crim)
crim
tail(sort(crim))
range(crim)
summary(crim)
summary(tax)
summary(ptratio)
str(Boston)
row.names(Boston)
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(ggplot2)
row.name(min(medv))
as.numeric(min(medv))
medv[1]
medv[5]
as.numberic(min(medv))
as.numeric(min(medv))
row.names(Boston$crim == 5)
row.names(Boston$crim < 10)
crim == 5
row.names(Boston$crim == 5)
row.names(crim == 5)
row.names(crim > 10)
?which.min
which.min(crim)
crim[1]
min(crim)
which.min(medv)
medv[399]
min(medv)
lowest.medv = which.min(medv)
Boston[lowest.medv]
Boston[lowest.medv,]
lowest.medv = which.min(medv)
Boston[lowest.medv,]
lowest.medv = which.min(medv)
Boston[lowest.medv,]
# DO NOT ALTER CODE IN THIS CHUNK
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(ggplot2)
college = read.csv(file = "College.csv", header = TRUE, sep = ",")
fix(college)
# remove uni names from list
rownames(college) = college[,1]
fix(college)
# isolate college names (sets as private)
college = college[,-1]
#let's look again
fix(college)
summary(college)
pairs(college)        # references whole set
pairs(college[,1:10]) # references first 10 columns
plot(college$Private, college$Outstate)
Elite = rep("No",nrow(college))
Elite[college$Top10perc>50]="Yes"
Elite=as.factor(Elite)
college=data.frame(college,Elite)
# summary() to see how many elite universities there are
summary(Elite)
# plot() for side-by-side boxplots of OutState vs Elite
plot(college$Elite, college$Outstate)
# output format
par(mfrow=c(1,1))
# some histograms
hist(college$Outstate)
hist(college$Apps)
hist(college$Accept)
hist(college$Enroll)
hist(college$PhD)
# a) load data
library(MASS)
#Boston
#Command is commented out to save paper
# info on set
?Boston
attach(Boston) # so we may access column names as variables
pairs(~ crim + nox + age)
pairs(~ ptratio + tax + lstat)
pairs(~ crim + medv)
pairs(~ dis + crim)
pairs(~ nox + crim)
summary(crim)
tail(sort(crim))
summary(tax)
tail(sort(tax))
summary(ptratio)
tail(sort(ptratio))
sum(chas)
median(ptratio)
Boston[lowest.medv]
Boston[lowest.medv,]
summary(crim)
summary(nox)
summary(black)
summary(lstat)
summary(age)
summary(indus)
Boston[lowest.medv,]
summary(rm)
summary(dis)
summary(rad)
Boston[lowest.medv,]
summary(ptratio)
summary(black)
summary(zn)
plot(college$Elite, college$Outstate, main="Elite vs. Out of State Universities")
plot(college$Elite, college$Outstate, xlab="Elite    Out of State", main="Elite vs. Out of State Universities")
Elite = rep("No",nrow(college))
Elite = rep("Elite",nrow(college))
Elite[college$Top10perc>50]="Elite"
Elite=as.factor(Elite)
college=data.frame(college,Elite)
# summary() to see how many elite universities there are
summary(Elite)
# plot() for side-by-side boxplots of OutState vs Elite
plot(college$Elite, college$Outstate, xlab="Elite    Out of State", main="Elite vs. Out of State Universities")
Elite = rep("Elite",nrow(college))
Elite = rep("Elite",nrow(college))
Elite[college$Top10perc>50]="Elite"
Elite=as.factor(Elite)
college=data.frame(college,Elite)
# summary() to see how many elite universities there are
summary(Elite)
# plot() for side-by-side boxplots of OutState vs Elite
plot(college$Elite, college$Outstate, main="Elite vs. Out of State Universities")
Elite[college$Top10perc>50]="Elite"
Elite=as.factor(Elite)
college=data.frame(college,Elite)
summary(Elite)
plot(college$Elite, college$Outstate, main="Elite vs. Out of State Universities")
Elite = rep("Elite",nrow(college))
Elite[college$Top10perc>50]="Elite"
Elite=as.factor(Elite)
college=data.frame(college,Elite)
# summary() to see how many elite universities there are
summary(Elite)
# plot() for side-by-side boxplots of OutState vs Elite
plot(college$Elite, college$Outstate, main="Elite vs. Out of State Universities")
library(MASS)
library(ISLR)
library(car)
library(usdm)
install.packages("data.table")
library(MASS)
library(ISLR)
sessionInfo()
library(MASS)
library(ISLR)
library(car)
library(usdm)
install.packages('ISLR')
library(ISLR)
install.packages('car')
install.packages('usdm')
library(MASS)
library(ISLR)
library(car)
library(usdm)
sessionInfo()
sessionInfo()
sessionInfo()
sessionInfo()
sessionInfo()
lm()
lm(mpg)
library(MASS)
names(Boston) #the name of the variables (corresponding to different columns)
lm.fit=lm(medv~lstat)
attach(Boston) #by using attach, we can call the variable name directly
lm.fit=lm(medv~lstat)
lm.fit=lm(medv~lstat,data=Boston) #simple linear regression with y=medv and x=lstat
lm.fit=lm(Boston$medv~Boston$lstat) #alternative way to run linear regression
lm(medv)
attach(Boston) #by using attach, we can call the variable name directly
lm.fit=lm(medv~lstat)
lm.fit #basic info (model and coefficients)
summary(lm.fit) #a detailed summary for the linear regresssion model
names(lm.fit) #gives all the pieces of information stored in lm.fit
coef(lm.fit) #the estimated coefficients piece of lm.fit (beta hat)
confint(lm.fit) #95% confidence intervals about the true coefficients
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="confidence")
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="prediction")
plot(lstat,medv) #2-D plot of x=lstat, y=medv
abline(lm.fit) # abline is used to add one more more straight lines through the current plot
abline(lm.fit,lwd=3) #specify the line width
abline(lm.fit,lwd=3,col="red") #specify the line width and the color
plot(lstat,medv,col="red") #specify the color of the dots
plot(lstat,medv,pch=20) #specify the form of the points, pch=0:25,46
sessionInfo
sessionInfo()
sessionInfo()
sessionInfo()
library(MASS)
setwd("~/Documents/MATH448/finalProject")
species = read.csv(file = "species.csv")
attach(species)
summary(species)
fix(species)
summary(species)
species$Record.Status
summary(species)
11958+2072+1310+431
